from __future__ import annotations

from typing import Any, List, Optional
from pydantic import BaseModel, Field


class ApiPaging(BaseModel):
    current: Optional[int] = Field(description="Current page number")
    total: Optional[int] = Field(description="Total number of pages")


class ApiResponse(BaseModel):
    get: str = Field(description="API endpoint that was called")
    parameters: dict[str, Any] = Field(description="Parameters used in the request")
    errors: Optional[dict[str, Any]] = Field(description="Any errors returned by the API")
    results: int = Field(description="Number of results returned")
    paging: Optional[ApiPaging] = Field(description="Pagination information")
    response: List[Any] = Field(description="Actual response data")


class LeagueResponse(BaseModel):
    id: int = Field(description="League ID")
    name: str = Field(description="League name")
    type: Optional[str] = Field(description="League type (e.g., 'League', 'Cup')")
    country: Optional[str] = Field(description="Country name")
    country_code: Optional[str] = Field(description="Country code (3 letters)")
    logo: Optional[str] = Field(description="League logo URL")
    flag: Optional[str] = Field(description="Country flag URL")
    season: int = Field(description="Season year")
    season_start: Optional[str] = Field(description="Season start date (YYYY-MM-DD)")
    season_end: Optional[str] = Field(description="Season end date (YYYY-MM-DD)")
    is_current: Optional[bool] = Field(description="Whether this is the current season")
    coverage: Optional[dict[str, Any]] = Field(description="Coverage information")


class TeamResponse(BaseModel):
    id: int = Field(description="Team ID")
    name: str = Field(description="Team name")
    code: Optional[str] = Field(description="Team code (3 letters)")
    country: Optional[str] = Field(description="Country name")
    founded: Optional[int] = Field(description="Year team was founded")
    national: Optional[bool] = Field(description="Whether this is a national team")
    logo: Optional[str] = Field(description="Team logo URL")
    venue_id: Optional[int] = Field(description="Venue ID")
    venue_name: Optional[str] = Field(description="Venue name")
    venue_address: Optional[str] = Field(description="Venue address")
    venue_city: Optional[str] = Field(description="Venue city")
    venue_capacity: Optional[int] = Field(description="Venue capacity")
    venue_surface: Optional[str] = Field(description="Venue surface type")
    venue_image: Optional[str] = Field(description="Venue image URL")


class PlayerResponse(BaseModel):
    id: int = Field(description="Player ID")
    name: str = Field(description="Player name")
    firstname: Optional[str] = Field(description="Player first name")
    lastname: Optional[str] = Field(description="Player last name")
    age: Optional[int] = Field(description="Player age")
    nationality: Optional[str] = Field(description="Player nationality")
    height: Optional[str] = Field(description="Player height")
    weight: Optional[str] = Field(description="Player weight")
    injured: Optional[bool] = Field(description="Whether player is injured")
    photo: Optional[str] = Field(description="Player photo URL")
    team_id: Optional[int] = Field(description="Team ID")
    team_name: Optional[str] = Field(description="Team name")
    position: Optional[str] = Field(description="Player position")
    number: Optional[int] = Field(description="Player shirt number")


class FixtureResponse(BaseModel):
    id: int = Field(description="Fixture ID")
    referee: Optional[str] = Field(description="Referee name")
    timezone: Optional[str] = Field(description="Timezone")
    date: Optional[str] = Field(description="Fixture date (YYYY-MM-DD)")
    timestamp: Optional[int] = Field(description="Unix timestamp")
    periods: Optional[dict[str, Any]] = Field(description="Match periods")
    venue_id: Optional[int] = Field(description="Venue ID")
    venue_name: Optional[str] = Field(description="Venue name")
    venue_city: Optional[str] = Field(description="Venue city")
    status: Optional[str] = Field(description="Fixture status")
    elapsed: Optional[int] = Field(description="Minutes elapsed")
    league_id: Optional[int] = Field(description="League ID")
    league_name: Optional[str] = Field(description="League name")
    league_country: Optional[str] = Field(description="League country")
    league_logo: Optional[str] = Field(description="League logo")
    league_flag: Optional[str] = Field(description="League flag")
    league_season: Optional[int] = Field(description="League season")
    league_round: Optional[str] = Field(description="League round")
    home_team_id: Optional[int] = Field(description="Home team ID")
    home_team_name: Optional[str] = Field(description="Home team name")
    home_team_logo: Optional[str] = Field(description="Home team logo")
    away_team_id: Optional[int] = Field(description="Away team ID")
    away_team_name: Optional[str] = Field(description="Away team name")
    away_team_logo: Optional[str] = Field(description="Away team logo")
    goals_home: Optional[int] = Field(description="Home team goals")
    goals_away: Optional[int] = Field(description="Away team goals")
    score_halftime_home: Optional[int] = Field(description="Home team halftime score")
    score_halftime_away: Optional[int] = Field(description="Away team halftime score")
    score_fulltime_home: Optional[int] = Field(description="Home team fulltime score")
    score_fulltime_away: Optional[int] = Field(description="Away team fulltime score")
    score_extratime_home: Optional[int] = Field(description="Home team extratime score")
    score_extratime_away: Optional[int] = Field(description="Away team extratime score")
    score_penalty_home: Optional[int] = Field(description="Home team penalty score")
    score_penalty_away: Optional[int] = Field(description="Away team penalty score")


class StandingResponse(BaseModel):
    rank: int = Field(description="Team rank in standings")
    team_id: int = Field(description="Team ID")
    team_name: str = Field(description="Team name")
    team_logo: Optional[str] = Field(description="Team logo URL")
    points: int = Field(description="Total points")
    goals_diff: int = Field(description="Goal difference")
    group: Optional[str] = Field(description="Group name")
    form: Optional[str] = Field(description="Recent form (W/D/L)")
    status: Optional[str] = Field(description="Status (promotion/relegation)")
    description: Optional[str] = Field(description="Description of status")
    all_played: int = Field(description="Total matches played")
    all_win: int = Field(description="Total wins")
    all_draw: int = Field(description="Total draws")
    all_lose: int = Field(description="Total losses")
    all_goals_for: int = Field(description="Total goals scored")
    all_goals_against: int = Field(description="Total goals conceded")
    home_played: int = Field(description="Home matches played")
    home_win: int = Field(description="Home wins")
    home_draw: int = Field(description="Home draws")
    home_lose: int = Field(description="Home losses")
    home_goals_for: int = Field(description="Home goals scored")
    home_goals_against: int = Field(description="Home goals conceded")
    away_played: int = Field(description="Away matches played")
    away_win: int = Field(description="Away wins")
    away_draw: int = Field(description="Away draws")
    away_lose: int = Field(description="Away losses")
    away_goals_for: int = Field(description="Away goals scored")
    away_goals_against: int = Field(description="Away goals conceded")


class TeamStatisticsResponse(BaseModel):
    league: dict[str, Any] = Field(description="League information")
    team: dict[str, Any] = Field(description="Team information")
    form: Optional[str] = Field(description="Recent form")
    fixtures: dict[str, Any] = Field(description="Fixtures statistics")
    goals: dict[str, Any] = Field(description="Goals statistics")
    biggest: dict[str, Any] = Field(description="Biggest wins/losses")
    clean_sheet: dict[str, Any] = Field(description="Clean sheet statistics")
    failed_to_score: dict[str, Any] = Field(description="Failed to score statistics")
    penalty: dict[str, Any] = Field(description="Penalty statistics")
    lineups: List[dict[str, Any]] = Field(description="Formations used")
    cards: dict[str, Any] = Field(description="Cards statistics")


class TeamStatisticsApiResponse(BaseModel):
    get: str = Field(description="API endpoint that was called")
    parameters: dict[str, Any] = Field(description="Parameters used in the request")
    errors: Optional[dict[str, Any]] = Field(description="Any errors returned by the API")
    results: int = Field(description="Number of results returned")
    paging: Optional[ApiPaging] = Field(description="Pagination information")
    response: TeamStatisticsResponse = Field(description="Team statistics data")


class PlayerStatisticsResponse(BaseModel):
    player_id: int = Field(description="Player ID")
    player_name: str = Field(description="Player name")
    player_firstname: Optional[str] = Field(description="Player first name")
    player_lastname: Optional[str] = Field(description="Player last name")
    player_age: Optional[int] = Field(description="Player age")
    player_nationality: Optional[str] = Field(description="Player nationality")
    player_height: Optional[str] = Field(description="Player height")
    player_weight: Optional[str] = Field(description="Player weight")
    player_injured: Optional[bool] = Field(description="Whether player is injured")
    player_photo: Optional[str] = Field(description="Player photo URL")
    team_id: int = Field(description="Team ID")
    team_name: str = Field(description="Team name")
    team_logo: Optional[str] = Field(description="Team logo")
    league_id: int = Field(description="League ID")
    league_name: str = Field(description="League name")
    league_country: str = Field(description="League country")
    league_season: int = Field(description="League season")
    games_appearences: Optional[int] = Field(description="Games appearances")
    games_lineups: Optional[int] = Field(description="Games in starting lineup")
    games_minutes: Optional[int] = Field(description="Total minutes played")
    games_number: Optional[int] = Field(description="Shirt number")
    games_position: Optional[str] = Field(description="Position played")
    games_rating: Optional[str] = Field(description="Average rating")
    games_captain: Optional[bool] = Field(description="Whether player is captain")
    substitutes_in: Optional[int] = Field(description="Substitutions in")
    substitutes_out: Optional[int] = Field(description="Substitutions out")
    substitutes_bench: Optional[int] = Field(description="Times on bench")
    shots_total: Optional[int] = Field(description="Total shots")
    shots_on: Optional[int] = Field(description="Shots on target")
    goals_total: Optional[int] = Field(description="Total goals")
    goals_conceded: Optional[int] = Field(description="Goals conceded")
    goals_assists: Optional[int] = Field(description="Assists")
    goals_saves: Optional[int] = Field(description="Saves")
    passes_total: Optional[int] = Field(description="Total passes")
    passes_key: Optional[int] = Field(description="Key passes")
    passes_accuracy: Optional[str] = Field(description="Pass accuracy percentage")
    tackles_total: Optional[int] = Field(description="Total tackles")
    tackles_blocks: Optional[int] = Field(description="Blocks")
    tackles_interceptions: Optional[int] = Field(description="Interceptions")
    duels_total: Optional[int] = Field(description="Total duels")
    duels_won: Optional[int] = Field(description="Duels won")
    dribbles_attempts: Optional[int] = Field(description="Dribble attempts")
    dribbles_success: Optional[int] = Field(description="Successful dribbles")
    dribbles_past: Optional[int] = Field(description="Dribbles past")
    fouls_drawn: Optional[int] = Field(description="Fouls drawn")
    fouls_committed: Optional[int] = Field(description="Fouls committed")
    cards_yellow: Optional[int] = Field(description="Yellow cards")
    cards_yellowred: Optional[int] = Field(description="Yellow-red cards")
    cards_red: Optional[int] = Field(description="Red cards")
    penalty_won: Optional[int] = Field(description="Penalties won")
    penalty_commut: Optional[int] = Field(description="Penalties committed")
    penalty_scored: Optional[int] = Field(description="Penalties scored")
    penalty_missed: Optional[int] = Field(description="Penalties missed")
    penalty_saved: Optional[int] = Field(description="Penalties saved")


class IngestionResponse(BaseModel):
    message: str = Field(description="Status message")
    league_id: int = Field(description="League ID being ingested")
    season: int = Field(description="Season being ingested")
    status: str = Field(description="Ingestion status")
    task_id: Optional[str] = Field(description="Background task ID")


class IngestionStatusResponse(BaseModel):
    league_id: int = Field(description="League ID")
    season: int = Field(description="Season")
    status: str = Field(description="Current status")
    progress: Optional[dict[str, Any]] = Field(description="Progress information")
    counts: Optional[dict[str, int]] = Field(description="Current record counts")
    last_updated: Optional[str] = Field(description="Last update timestamp")
